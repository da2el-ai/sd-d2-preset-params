{"version":3,"file":"d2_prompt_selector.js","sources":["../src/js/D2PPPresetManager.ts","../src/js/D2PPElementBuilder.ts","../src/js/D2PPToolTip.ts","../src/js/D2PPCategoryUnit.ts","../src/js/D2PPAreaUnit.ts","../src/js/D2PPPresetParams.ts","../src/js/index.ts"],"sourcesContent":["import { TAllPresets, TArea, TPreset } from './types';\n\ndeclare var updateInput: any;\n\nclass D2PPPresetManager {\n    static allPresets: TAllPresets;\n\n    /**\n     * プリセットをjsonで取得\n     */\n    static async getPresetsFromApi() {\n        const response = await fetch(`/d2pp/presets?${new Date().getTime()}`);\n        const presets = await response.json();\n        // console.log('getPresets', presets);\n        D2PPPresetManager.allPresets = presets;\n    }\n\n    /**\n     * 任意のプリセットを取得する\n     */\n    static getPreset(area: TArea, categoryId: string, title: string): undefined | TPreset {\n        const categoryPreset = D2PPPresetManager.allPresets[categoryId][area];\n        return categoryPreset.find((preset) => preset.title === title);\n    }\n\n    /**\n     * プリセットを適用する\n     */\n    static applyPreset(area: TArea, categoryId: string, title: string) {\n        const preset = D2PPPresetManager.getPreset(area, categoryId, title);\n        // console.log('applyPreset', categoryId, title, preset);\n        if (preset === undefined) return;\n\n        preset.params.forEach((param) => {\n            const element = document.querySelector(param.selector) as HTMLInputElement;\n            // console.log('element', element);\n            if (!element) return;\n\n            if (element.type === 'checkbox') {\n                element.checked = param.value === 'true';\n            } else {\n                element.value = param.value;\n            }\n\n            updateInput(element);\n        });\n    }\n}\n\nexport { D2PPPresetManager };\n","import { TElementParams } from './types';\n\n/*********************************************************\n * UI作成クラス\n */\nclass D2PPElementBuilder {\n    /**\n     * ボタン作成\n     * @param {*} text ボタンに表示するテキスト\n     * @param {*} param1 サイズ、色の指定\n     */\n    static baseButton(text: string, { size = 'sm', color = 'primary' }: TElementParams): HTMLButtonElement {\n        const button = document.createElement('button');\n        button.classList.add(\n            // gradio 3.16\n            `gr-button-${size}`,\n            `gr-button-${color}`,\n            // gradio 3.22\n            size,\n            color,\n        );\n        button.textContent = text;\n\n        return button;\n    }\n\n    /**\n     * プリセットリストを開くボタン\n     */\n    static openButton({ onClick = () => {} }: TElementParams): HTMLButtonElement {\n        const button = D2PPElementBuilder.baseButton('プリセットを選択', {\n            size: 'sm',\n            color: 'secondary',\n        });\n        button.classList.add('d2pp-button', 'd2pp-button--open');\n        button.addEventListener('click', onClick);\n        return button;\n    }\n\n    /**\n     * プリセット全体を覆うコンテナ\n     */\n    static ppContainer(id: string = ''): HTMLElement {\n        const container = document.createElement('div');\n        container.id = id;\n        container.classList.add('d2pp-pp-container');\n        return container;\n    }\n\n    /**\n     * プリセットボタン\n     */\n    static presetButton(\n        title: string,\n        {\n            onClick = () => {},\n            onRightClick = () => {},\n            onMouseEnter = () => {},\n            onMouseLeave = () => {},\n            color = 'primary',\n        }: TElementParams,\n    ): HTMLButtonElement {\n        const button = D2PPElementBuilder.baseButton(title, { color });\n        button.classList.add('d2pp-button', 'd2pp-button--preset');\n        button.addEventListener('click', onClick);\n        button.addEventListener('contextmenu', onRightClick);\n        button.addEventListener('mouseenter', onMouseEnter);\n        button.addEventListener('mouseleave', onMouseLeave);\n        return button;\n    }\n\n    /**\n     * プリセットボタンを格納する枠\n     */\n    static presetField(): HTMLElement {\n        const field = document.createElement('div');\n        field.classList.add('d2pp-preset-field');\n        return field;\n    }\n\n    /**\n     * 再読み込みボタン\n     */\n    static reloadButton(title: string, { onClick = () => {}, color = 'primary' }: TElementParams): HTMLButtonElement {\n        const button = D2PPElementBuilder.baseButton(title, { color });\n        button.classList.add('d2pp-button', 'd2pp-button--reload');\n        button.addEventListener('click', onClick);\n        return button;\n    }\n\n    /**\n     * ツールチップ\n     */\n    static toolTipContainer() {\n        const container = document.createElement('div');\n        container.classList.add('d2pp-tooltip-container');\n        return container;\n    }\n}\n\nexport { D2PPElementBuilder };\n","/**\nプリセット内容を画面下部に表示\n */\n\nimport { D2PPPresetManager } from './D2PPPresetManager';\nimport { D2PPElementBuilder } from './D2PPElementBuilder';\nimport { TArea, TPreset, TOpts } from './types';\n\ndeclare var opts: TOpts;\n\nclass D2PPToolTip {\n    static CONTAINER_CLASS = 'd2pp-tooltip-container';\n    static container: HTMLElement;\n    static toHide = false;\n\n    /**\n     * 初期化\n     */\n    static init() {\n        const self = D2PPToolTip;\n\n        if (document.querySelector(self.CONTAINER_CLASS)) return;\n\n        self.container = D2PPElementBuilder.toolTipContainer();\n        self.container.addEventListener('animationend', () => {\n            self.container.setAttribute('data-show', '');\n        });\n        document.body.appendChild(self.container);\n    }\n\n    /**\n     * ツールチップの表示は有効か\n     */\n    static get isEnabled(): boolean {\n        return opts.d2_pp_enable_tooltip;\n    }\n\n    static convertPresetToHtml(preset: TPreset): HTMLElement {\n        const list = document.createElement('div');\n        list.classList.add('d2pp-param-list-container');\n\n        if (preset.description) {\n            const description = document.createElement('div');\n            description.classList.add('d2pp-param-list-description');\n            description.textContent = preset.description;\n            list.appendChild(description);\n        }\n\n        preset.params.forEach((param) => {\n            const item = document.createElement('dl');\n            item.classList.add('d2pp-param-list-item');\n\n            const selectorDt = document.createElement('dt');\n            selectorDt.textContent = 'SELECTOR';\n            const selectorDd = document.createElement('dd');\n            selectorDd.textContent = param.selector;\n\n            const valueDt = document.createElement('dt');\n            valueDt.textContent = 'VALUE';\n            const valueDd = document.createElement('dd');\n            valueDd.textContent = param.value;\n\n            item.appendChild(selectorDt);\n            item.appendChild(selectorDd);\n            item.appendChild(valueDt);\n            item.appendChild(valueDd);\n            list.appendChild(item);\n        });\n\n        return list;\n    }\n\n    /**\n     * タグを表示\n     */\n    static showTip(area: TArea, categoryId: string, title: string) {\n        const self = D2PPToolTip;\n        if (!self.isEnabled) return;\n\n        const preset = D2PPPresetManager.getPreset(area, categoryId, title);\n        const list = self.convertPresetToHtml(preset as TPreset);\n\n        self.toHide = false;\n        self.container.replaceChildren(list);\n        self.container.setAttribute('data-show', 'true');\n    }\n\n    /**\n     * 非表示\n     */\n    static hideTip() {\n        const self = D2PPToolTip;\n        if (!self.isEnabled) return;\n\n        self.toHide = true;\n\n        setTimeout(() => {\n            if (!self.toHide) return;\n\n            self.container.setAttribute('data-show', 'false');\n        }, 500);\n    }\n}\n\nexport { D2PPToolTip };\n","import { D2PPPresetManager } from './D2PPPresetManager';\nimport { D2PPElementBuilder } from './D2PPElementBuilder';\nimport { D2PPToolTip } from './D2PPToolTip';\nimport { TArea, TCategoryPresets, TElementParams } from './types';\n\n///////////////////\nclass D2PPCategoryUnit {\n    // onClick: TPresetButtonClick;\n    area: TArea;\n    categoryId: string = '';\n    container: HTMLElement;\n\n    constructor(area: TArea, categoryId: string) {\n        this.area = area;\n        this.categoryId = categoryId;\n        // this.onClick = onClick;\n        this.container = D2PPElementBuilder.presetField();\n        // this.container.style.display = 'none';\n    }\n\n    /**\n     * カテゴリーを作る\n     */\n    createCategory(categoryPresets: TCategoryPresets): HTMLElement {\n        categoryPresets[this.area].forEach((preset) => {\n            const button = this.$_createPresetButton(preset.title, 'secondary');\n            this.container.appendChild(button);\n        });\n        return this.container;\n    }\n\n    /**\n     * プリセットボタンを作成\n     * @param title ボタンに表示するテキスト\n     * @param value プロンプトタグ\n     * @param color ボタン色\n     * @returns ボタン\n     */\n    private $_createPresetButton(title: string, color = 'primary'): HTMLButtonElement {\n        const elementParams: TElementParams = {\n            onClick: (e: MouseEvent) => {\n                e.preventDefault();\n                D2PPPresetManager.applyPreset(this.area, this.categoryId, title);\n            },\n            onMouseEnter: () => {\n                D2PPToolTip.showTip(this.area, this.categoryId, title);\n            },\n            onMouseLeave: () => {\n                D2PPToolTip.hideTip();\n            },\n            color,\n        };\n\n        return D2PPElementBuilder.presetButton(title, elementParams);\n    }\n}\n\nexport { D2PPCategoryUnit };\n","/* global gradioApp */\n\nimport { D2PPElementBuilder } from './D2PPElementBuilder';\nimport { D2PPCategoryUnit } from './D2PPCategoryUnit';\nimport { D2PPPresetManager } from './D2PPPresetManager';\nimport { TArea } from './types';\n\ndeclare var gradioApp: any;\n\nclass D2PPAreaUnit {\n    AREA_ID_BASE = 'd2pp-pp-container--';\n\n    area: TArea;\n    visible: boolean;\n    categories: D2PPCategoryUnit[];\n\n    /**\n     * コンストラクタ\n     */\n    constructor(area: TArea) {\n        this.area = area;\n        this.visible = false;\n        this.categories = [];\n    }\n\n    /**\n     * 表示切り替えボタンなど基本コントローラー作成\n     */\n    createControl(reloadClick: () => void) {\n        // 表示切り替えボタン\n        const openButton = D2PPElementBuilder.openButton({\n            onClick: () => {\n                this.changeVisible();\n            },\n        });\n\n        // プリセット再読み込みボタン\n        const reloadButton = D2PPElementBuilder.reloadButton('🔄', {\n            onClick: async () => {\n                await reloadClick();\n            },\n        });\n\n        // 機能拡張エリアの枠を生成ボタンの下に移動しちゃう\n        const actionColumn = gradioApp().getElementById(`${this.area}_actions_column`);\n        const container = document.createElement('div');\n        container.classList.add('d2pp-action-container');\n        container.appendChild(openButton);\n        container.appendChild(reloadButton);\n        actionColumn.appendChild(container);\n    }\n\n    /**\n     * 初期化\n     */\n    init() {\n        // タグボタンを消して作り直す\n        const container = this.$_getContainer();\n        if (container != null) {\n            container.remove();\n            this.categories = [];\n        }\n        gradioApp().getElementById(`${this.area}_toprow`).after(this.$_render());\n    }\n\n    /**\n     * 表示状態切り替え\n     */\n    changeVisible() {\n        this.visible = !this.visible;\n        this.$_getContainer().style.display = this.visible ? 'block' : 'none';\n    }\n\n    /**\n     * プリセット全体を格納したコンテナ\n     */\n    private $_getContainer(): HTMLElement {\n        return gradioApp().querySelector(`#${this.AREA_ID_BASE}${this.area}`);\n    }\n\n    /**\n     * タグエリア全体を作る\n     */\n    private $_render() {\n        // 全体を覆うコンテナ\n        const container = D2PPElementBuilder.ppContainer(`${this.AREA_ID_BASE}${this.area}`);\n\n        // タブ切り替えボタン\n        // container.appendChild(this.$_renderTabNavi());\n        // タグカテゴリ作成\n        this.$_renderCategory(container);\n        // this.$_changeCategory();\n\n        return container;\n    }\n\n    /**\n     * タブ切り替えを作る\n     */\n    // private $_renderTabNavi(): HTMLElement {\n    //     this.tabNavi = new D2PPTabNavi(() => {\n    //         this.$_changeCategory();\n    //     });\n    //     return this.tabNavi.createTabNavi(this.config as TConfig, this.tags);\n    // }\n\n    /**\n     * アクティブカテゴリーを切り替える\n     */\n    // private $_changeCategory() {\n    //     this.categories.forEach((category: D2PPCategoryUnit) => {\n    //         if (this.tabNavi!.activeCategory === category.categoryId) {\n    //             category.container.style.display = 'flex';\n    //         } else {\n    //             category.container.style.display = 'none';\n    //         }\n    //     });\n    // }\n\n    /**\n     * タグカテゴリを作る\n     */\n    private $_renderCategory(ppContainer: HTMLElement) {\n        Object.keys(D2PPPresetManager.allPresets).forEach((categoryId: string) => {\n            // const category = new D2PPCategoryUnit(this.area, categoryId, (categoryId: string, title: string) => {\n            //     console.log('click', categoryId, title);\n            //     D2PPPresetManager.applyPreset(this.area, categoryId, title);\n            // });\n            const category = new D2PPCategoryUnit(this.area, categoryId);\n\n            const categoryContainer = category.createCategory(D2PPPresetManager.allPresets[categoryId]);\n            ppContainer.appendChild(categoryContainer);\n            this.categories.push(category);\n        });\n    }\n}\n\nexport { D2PPAreaUnit };\n","/* global gradioApp */\n\nimport { D2PPPresetManager } from './D2PPPresetManager';\nimport { D2PPAreaUnit } from './D2PPAreaUnit';\nimport { TAllPresets } from './types';\n\nclass D2PresetParams {\n    allPresets: TAllPresets;\n    t2iAreaUnit: D2PPAreaUnit;\n    i2iAreaUnit: D2PPAreaUnit;\n\n    /**\n     * コンストラクタ\n     */\n    constructor() {\n        this.t2iAreaUnit = new D2PPAreaUnit('txt2img');\n        this.i2iAreaUnit = new D2PPAreaUnit('img2img');\n        this.allPresets = {};\n    }\n\n    /**\n     * 表示切り替えボタンなどを作成\n     * 再読み込みボタンの動作も指定\n     */\n    createControl() {\n        this.t2iAreaUnit.createControl(() => {\n            this.init();\n        });\n        this.i2iAreaUnit.createControl(() => {\n            this.init();\n        });\n    }\n\n    /**\n     * 初期化\n     */\n    async init() {\n        await D2PPPresetManager.getPresetsFromApi();\n        this.t2iAreaUnit.init();\n        this.i2iAreaUnit.init();\n    }\n\n    /**\n     * 表示状態切り替え\n     */\n    changeVisible() {\n        this.t2iAreaUnit.changeVisible();\n        this.i2iAreaUnit.changeVisible();\n    }\n}\n\nexport { D2PresetParams };\n","declare var onOptionsChanged: any;\r\ndeclare var onUiLoaded: any;\r\n\r\n/*********************************************************\r\n * webui callback\r\n */\r\n\r\nimport { D2PresetParams } from './D2PPPresetParams';\r\nimport { D2PPToolTip } from './D2PPToolTip';\r\n\r\nconst presetParams = new D2PresetParams();\r\n\r\n// 設定変更したらタグ読み直し\r\n// onOptionsChanged(() => {\r\n//     // console.log('------ onOptionsChanged');\r\n//     presetParams.init();\r\n// });\r\n\r\n// UI表示したら作成\r\nonUiLoaded(() => {\r\n    presetParams.createControl();\r\n    presetParams.init();\r\n    D2PPToolTip.init();\r\n});\r\n"],"names":[],"mappings":";;;;;;AAIA,MAAM,qBAAN,MAAM,mBAAkB;AAAA;AAAA;AAAA;AAAA,EAMpB,aAAa,oBAAoB;AACvB,UAAA,WAAW,MAAM,MAAM,sCAAqB,QAAO,SAAS,EAAE;AAC9D,UAAA,UAAU,MAAM,SAAS;AAE/B,uBAAkB,aAAa;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,UAAU,MAAa,YAAoB,OAAoC;AAClF,UAAM,iBAAiB,mBAAkB,WAAW,UAAU,EAAE,IAAI;AACpE,WAAO,eAAe,KAAK,CAAC,WAAW,OAAO,UAAU,KAAK;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,YAAY,MAAa,YAAoB,OAAe;AAC/D,UAAM,SAAS,mBAAkB,UAAU,MAAM,YAAY,KAAK;AAElE,QAAI,WAAW;AAAW;AAEnB,WAAA,OAAO,QAAQ,CAAC,UAAU;AAC7B,YAAM,UAAU,SAAS,cAAc,MAAM,QAAQ;AAErD,UAAI,CAAC;AAAS;AAEV,UAAA,QAAQ,SAAS,YAAY;AACrB,gBAAA,UAAU,MAAM,UAAU;AAAA,MAAA,OAC/B;AACH,gBAAQ,QAAQ,MAAM;AAAA,MAC1B;AAEA,kBAAY,OAAO;AAAA,IAAA,CACtB;AAAA,EACL;AACJ;AA1CI,cADE,oBACK;AADX,IAAM,oBAAN;ACCA,MAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrB,OAAO,WAAW,MAAc,EAAE,OAAO,MAAM,QAAQ,aAAgD;AAC7F,UAAA,SAAS,SAAS,cAAc,QAAQ;AAC9C,WAAO,UAAU;AAAA;AAAA,MAEb,aAAa,IAAI;AAAA,MACjB,aAAa,KAAK;AAAA;AAAA,MAElB;AAAA,MACA;AAAA,IAAA;AAEJ,WAAO,cAAc;AAEd,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAW,EAAE,UAAU,MAAM;AAAA,EAAA,KAAyC;AACnE,UAAA,SAAS,mBAAmB,WAAW,YAAY;AAAA,MACrD,MAAM;AAAA,MACN,OAAO;AAAA,IAAA,CACV;AACM,WAAA,UAAU,IAAI,eAAe,mBAAmB;AAChD,WAAA,iBAAiB,SAAS,OAAO;AACjC,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,YAAY,KAAa,IAAiB;AACvC,UAAA,YAAY,SAAS,cAAc,KAAK;AAC9C,cAAU,KAAK;AACL,cAAA,UAAU,IAAI,mBAAmB;AACpC,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,aACH,OACA;AAAA,IACI,UAAU,MAAM;AAAA,IAAC;AAAA,IACjB,eAAe,MAAM;AAAA,IAAC;AAAA,IACtB,eAAe,MAAM;AAAA,IAAC;AAAA,IACtB,eAAe,MAAM;AAAA,IAAC;AAAA,IACtB,QAAQ;AAAA,EAAA,GAEK;AACjB,UAAM,SAAS,mBAAmB,WAAW,OAAO,EAAE,OAAO;AACtD,WAAA,UAAU,IAAI,eAAe,qBAAqB;AAClD,WAAA,iBAAiB,SAAS,OAAO;AACjC,WAAA,iBAAiB,eAAe,YAAY;AAC5C,WAAA,iBAAiB,cAAc,YAAY;AAC3C,WAAA,iBAAiB,cAAc,YAAY;AAC3C,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,cAA2B;AACxB,UAAA,QAAQ,SAAS,cAAc,KAAK;AACpC,UAAA,UAAU,IAAI,mBAAmB;AAChC,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,aAAa,OAAe,EAAE,UAAU,MAAM;AAAA,EAAA,GAAI,QAAQ,aAAgD;AAC7G,UAAM,SAAS,mBAAmB,WAAW,OAAO,EAAE,OAAO;AACtD,WAAA,UAAU,IAAI,eAAe,qBAAqB;AAClD,WAAA,iBAAiB,SAAS,OAAO;AACjC,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,mBAAmB;AAChB,UAAA,YAAY,SAAS,cAAc,KAAK;AACpC,cAAA,UAAU,IAAI,wBAAwB;AACzC,WAAA;AAAA,EACX;AACJ;ACxFA,MAAM,eAAN,MAAM,aAAY;AAAA;AAAA;AAAA;AAAA,EAQd,OAAO,OAAO;AACV,UAAM,OAAO;AAET,QAAA,SAAS,cAAc,KAAK,eAAe;AAAG;AAE7C,SAAA,YAAY,mBAAmB;AAC/B,SAAA,UAAU,iBAAiB,gBAAgB,MAAM;AAC7C,WAAA,UAAU,aAAa,aAAa,EAAE;AAAA,IAAA,CAC9C;AACQ,aAAA,KAAK,YAAY,KAAK,SAAS;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,YAAqB;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,oBAAoB,QAA8B;AAC/C,UAAA,OAAO,SAAS,cAAc,KAAK;AACpC,SAAA,UAAU,IAAI,2BAA2B;AAE9C,QAAI,OAAO,aAAa;AACd,YAAA,cAAc,SAAS,cAAc,KAAK;AACpC,kBAAA,UAAU,IAAI,6BAA6B;AACvD,kBAAY,cAAc,OAAO;AACjC,WAAK,YAAY,WAAW;AAAA,IAChC;AAEO,WAAA,OAAO,QAAQ,CAAC,UAAU;AACvB,YAAA,OAAO,SAAS,cAAc,IAAI;AACnC,WAAA,UAAU,IAAI,sBAAsB;AAEnC,YAAA,aAAa,SAAS,cAAc,IAAI;AAC9C,iBAAW,cAAc;AACnB,YAAA,aAAa,SAAS,cAAc,IAAI;AAC9C,iBAAW,cAAc,MAAM;AAEzB,YAAA,UAAU,SAAS,cAAc,IAAI;AAC3C,cAAQ,cAAc;AAChB,YAAA,UAAU,SAAS,cAAc,IAAI;AAC3C,cAAQ,cAAc,MAAM;AAE5B,WAAK,YAAY,UAAU;AAC3B,WAAK,YAAY,UAAU;AAC3B,WAAK,YAAY,OAAO;AACxB,WAAK,YAAY,OAAO;AACxB,WAAK,YAAY,IAAI;AAAA,IAAA,CACxB;AAEM,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAQ,MAAa,YAAoB,OAAe;AAC3D,UAAM,OAAO;AACb,QAAI,CAAC,KAAK;AAAW;AAErB,UAAM,SAAS,kBAAkB,UAAU,MAAM,YAAY,KAAK;AAC5D,UAAA,OAAO,KAAK,oBAAoB,MAAiB;AAEvD,SAAK,SAAS;AACT,SAAA,UAAU,gBAAgB,IAAI;AAC9B,SAAA,UAAU,aAAa,aAAa,MAAM;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,UAAU;AACb,UAAM,OAAO;AACb,QAAI,CAAC,KAAK;AAAW;AAErB,SAAK,SAAS;AAEd,eAAW,MAAM;AACb,UAAI,CAAC,KAAK;AAAQ;AAEb,WAAA,UAAU,aAAa,aAAa,OAAO;AAAA,OACjD,GAAG;AAAA,EACV;AACJ;AA3FI,cADE,cACK,mBAAkB;AACzB,cAFE,cAEK;AACP,cAHE,cAGK,UAAS;AAHpB,IAAM,cAAN;ACJA,MAAM,iBAAiB;AAAA,EAMnB,YAAY,MAAa,YAAoB;AAJ7C;AAAA;AACA,sCAAqB;AACrB;AAGI,SAAK,OAAO;AACZ,SAAK,aAAa;AAEb,SAAA,YAAY,mBAAmB;EAExC;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,iBAAgD;AAC3D,oBAAgB,KAAK,IAAI,EAAE,QAAQ,CAAC,WAAW;AAC3C,YAAM,SAAS,KAAK,qBAAqB,OAAO,OAAO,WAAW;AAC7D,WAAA,UAAU,YAAY,MAAM;AAAA,IAAA,CACpC;AACD,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,qBAAqB,OAAe,QAAQ,WAA8B;AAC9E,UAAM,gBAAgC;AAAA,MAClC,SAAS,CAAC,MAAkB;AACxB,UAAE,eAAe;AACjB,0BAAkB,YAAY,KAAK,MAAM,KAAK,YAAY,KAAK;AAAA,MACnE;AAAA,MACA,cAAc,MAAM;AAChB,oBAAY,QAAQ,KAAK,MAAM,KAAK,YAAY,KAAK;AAAA,MACzD;AAAA,MACA,cAAc,MAAM;AAChB,oBAAY,QAAQ;AAAA,MACxB;AAAA,MACA;AAAA,IAAA;AAGG,WAAA,mBAAmB,aAAa,OAAO,aAAa;AAAA,EAC/D;AACJ;AC9CA,MAAM,aAAa;AAAA;AAAA;AAAA;AAAA,EAUf,YAAY,MAAa;AATzB,wCAAe;AAEf;AACA;AACA;AAMI,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,aAAa;EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,aAAyB;AAE7B,UAAA,aAAa,mBAAmB,WAAW;AAAA,MAC7C,SAAS,MAAM;AACX,aAAK,cAAc;AAAA,MACvB;AAAA,IAAA,CACH;AAGK,UAAA,eAAe,mBAAmB,aAAa,MAAM;AAAA,MACvD,SAAS,YAAY;AACjB,cAAM,YAAY;AAAA,MACtB;AAAA,IAAA,CACH;AAGD,UAAM,eAAe,UAAU,EAAE,eAAe,GAAG,KAAK,IAAI,iBAAiB;AACvE,UAAA,YAAY,SAAS,cAAc,KAAK;AACpC,cAAA,UAAU,IAAI,uBAAuB;AAC/C,cAAU,YAAY,UAAU;AAChC,cAAU,YAAY,YAAY;AAClC,iBAAa,YAAY,SAAS;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO;AAEG,UAAA,YAAY,KAAK;AACvB,QAAI,aAAa,MAAM;AACnB,gBAAU,OAAO;AACjB,WAAK,aAAa;IACtB;AACU,gBAAE,eAAe,GAAG,KAAK,IAAI,SAAS,EAAE,MAAM,KAAK,SAAU,CAAA;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACP,SAAA,UAAU,CAAC,KAAK;AACrB,SAAK,eAAiB,EAAA,MAAM,UAAU,KAAK,UAAU,UAAU;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAA8B;AAC3B,WAAA,YAAY,cAAc,IAAI,KAAK,YAAY,GAAG,KAAK,IAAI,EAAE;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA,EAKQ,WAAW;AAET,UAAA,YAAY,mBAAmB,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,IAAI,EAAE;AAKnF,SAAK,iBAAiB,SAAS;AAGxB,WAAA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BQ,iBAAiB,aAA0B;AAC/C,WAAO,KAAK,kBAAkB,UAAU,EAAE,QAAQ,CAAC,eAAuB;AAKtE,YAAM,WAAW,IAAI,iBAAiB,KAAK,MAAM,UAAU;AAE3D,YAAM,oBAAoB,SAAS,eAAe,kBAAkB,WAAW,UAAU,CAAC;AAC1F,kBAAY,YAAY,iBAAiB;AACpC,WAAA,WAAW,KAAK,QAAQ;AAAA,IAAA,CAChC;AAAA,EACL;AACJ;ACjIA,MAAM,eAAe;AAAA;AAAA;AAAA;AAAA,EAQjB,cAAc;AAPd;AACA;AACA;AAMS,SAAA,cAAc,IAAI,aAAa,SAAS;AACxC,SAAA,cAAc,IAAI,aAAa,SAAS;AAC7C,SAAK,aAAa;EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACP,SAAA,YAAY,cAAc,MAAM;AACjC,WAAK,KAAK;AAAA,IAAA,CACb;AACI,SAAA,YAAY,cAAc,MAAM;AACjC,WAAK,KAAK;AAAA,IAAA,CACb;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO;AACT,UAAM,kBAAkB;AACxB,SAAK,YAAY;AACjB,SAAK,YAAY;EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACZ,SAAK,YAAY;AACjB,SAAK,YAAY;EACrB;AACJ;ACvCA,MAAM,eAAe,IAAI;AASzB,WAAW,MAAM;AACb,eAAa,cAAc;AAC3B,eAAa,KAAK;AAClB,cAAY,KAAK;AACrB,CAAC;"}